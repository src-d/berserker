syntax = "proto3";
package github.com.bblfsh.sdk.protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/bblfsh/sdk/uast/generated.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option go_package = "protocol";

// ParseRequest is a request to parse a file and get its UAST.
message ParseRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string filename = 1;
	string language = 2;
	string content = 3;
	github.com.bblfsh.sdk.protocol.Encoding encoding = 4;
}

// ParseResponse is the reply to ParseRequest.
message ParseResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	github.com.bblfsh.sdk.protocol.Status status = 1;
	repeated string errors = 2;
	github.com.bblfsh.sdk.uast.Node uast = 3 [(gogoproto.customname) = "UAST"];
}

// Encoding is the encoding used for the content string. Currently only
// UTF-8 or Base64 encodings are supported. You should use UTF-8 if you can
// and Base64 as a fallback.
enum Encoding {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// UTF8 encoding
	UTF8 = 0 [(gogoproto.enumvalue_customname) = "UTF8"];
	// Base64 encoding
	BASE64 = 1 [(gogoproto.enumvalue_customname) = "Base64"];
}

// Status is the status of a response.
enum Status {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// Ok status code.
	OK = 0 [(gogoproto.enumvalue_customname) = "Ok"];
	// Error status code. It is replied when the driver has got the AST with errors.
	ERROR = 1 [(gogoproto.enumvalue_customname) = "Error"];
	// Fatal status code. It is replied when the driver hasn't could get the AST.
	FATAL = 2 [(gogoproto.enumvalue_customname) = "Fatal"];
}

service ProtocolService {
	// Parse uses DefaultParser to process the given parsing request to get the UAST.
	rpc Parse (github.com.bblfsh.sdk.protocol.ParseRequest) returns (github.com.bblfsh.sdk.protocol.ParseResponse);
}

